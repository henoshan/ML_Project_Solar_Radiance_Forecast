# -*- coding: utf-8 -*-
"""ML_Project_Solar_Radiance_Forecast.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GS0ClysQRKU1ZvVvJU-e1oJ5jLbRBDW7

# **Machine Learning Model for Solar Radiance Forecast: Powering Tomorrow**

**Project Objective:**
> The primary objective of this project is to develop a robust and accurate solar power generation forecasting system that leverages machine learning techniques to predict global radiation levels. Global radiation, a key meteorological parameter, plays a pivotal role in determining the availability of solar energy for power generation. By forecasting global radiation with precision, we aim to empower solar energy management systems to optimize energy production and reduce reliance on non-renewable energy sources.

# **1. Import necessary libraries**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

"""# **2. Load the dataset**
This data set is received from Kaggle.

Source: https://www.ecad.eu/dailydata/index.php
"""

from google.colab import files
uploaded = files.upload()

# Load the dataset
data = pd.read_csv("london_weather.csv")

"""# **3. Explore and preprocess the data**"""

# Checking the first few rows of the dataset to get an overview.
print(data.head())

print(data.describe())

# Check for missing values
missing_values = data.isnull().sum()
print(missing_values)

"""1.   **Handling Missing Values for Relevant Features:**


> For the cloud_cover, max_temp, mean_temp, min_temp, precipitation, and snow_depth columns, missing values were filled with zeros. This approach was chosen as it is a reasonable assumption that these missing values represent instances where certain weather-related metrics were not recorded.


2.   **Handling Missing Values for Global Radiation and Pressure:**


> For the global_radiation and pressure columns, missing values were filled with the mean values of the respective columns. This approach leverages the available data to impute missing values, ensuring that they are replaced with values that are representative of the dataset.


By implementing these strategies, the dataset can be prepared for further analysis and modeling, ensuring that missing values did not affect the accuracy level of the machine learning model.



"""

# Fill missing values
data['cloud_cover'].fillna(0, inplace=True)
data['max_temp'].fillna(0, inplace=True)
data['mean_temp'].fillna(0, inplace=True)
data['min_temp'].fillna(0, inplace=True)
data['precipitation'].fillna(0, inplace=True)
data['snow_depth'].fillna(0, inplace=True)

mean_global_radiation = data['global_radiation'].mean()
data['global_radiation'].fillna(mean_global_radiation, inplace=True)

mean_pressure = data['pressure'].mean()
data['pressure'].fillna(mean_pressure, inplace=True)

# Verifying that missing values are filled
print(data.isnull().sum())

"""Filling process of missing values is successful as all the holes are filled.

Now the dataset is perfect.
"""

# Checking the status of data set again after filling those missing values
print(data.describe())

"""# **4. Data Visualization and Feature selection**"""

# Select the relevant features for weather forecasting
features = ['cloud_cover', 'sunshine', 'global_radiation', 'max_temp', 'mean_temp', 'min_temp', 'precipitation', 'pressure', 'snow_depth']

# Pair plot for all numerical features
sns.pairplot(data[features])
plt.show()

# Correlation heatmap for all numerical features
correlation_matrix = data[features].corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

"""# **5. Prepare the Data for Training.**

In the context of our solar power generation forecasting project, we have made the deliberate decision to exclude the 'snow_depth' variable from our input features. This decision is based on several considerations:

1. **Low Correlation**: Upon analyzing the dataset, we observed that 'snow_depth' exhibited a relatively low correlation with both our target variable, 'global_radiation,' and other selected input features. This low correlation suggests that 'snow_depth' may have limited direct influence on global radiation levels in our specific location or that it is not a significant factor for our forecasting goals.

2. **Project Focus**: Our primary objective in this project is to predict 'global_radiation' accurately, as it plays a central role in solar energy generation. Given our specific focus on solar radiation forecasting, we have chosen to prioritize input features that have a more direct and pronounced impact on our target variable.

3. **Domain Relevance**: 'snow_depth' is particularly relevant for regions and applications where snowfall and snow accumulation have a substantial effect on weather conditions and energy generation. However, in our current context, which involves solar energy management and forecasting, this variable is less pertinent.

By omitting 'snow_depth' from our feature set, we aim to streamline our model and focus on the key meteorological factors that are most influential in predicting global radiation levels for solar power generation. This allows us to build a more targeted and efficient forecasting model aligned with our project's objectives.
"""

# Define the target variable
target_variable = 'global_radiation'

# Select input features
input_features = ['cloud_cover', 'sunshine', 'max_temp', 'mean_temp', 'min_temp', 'precipitation', 'pressure']

# Create the feature matrix (X) and target vector (y)
X = data[input_features]
y = data[target_variable]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Verify the shape of the training and testing sets
print(f"X_train shape: {X_train.shape}")
print(f"X_test shape: {X_test.shape}")
print(f"y_train shape: {y_train.shape}")
print(f"y_test shape: {y_test.shape}")

"""# **6. Build and Train the Machine Learning Model**"""

# Create and train the machine learning model
model = LinearRegression()  # You can choose a different model here
model.fit(X_train, y_train)

"""# **7. Make Predictions and Evaluate the Model**"""

# Making predictions using testing data set on build model
y_pred = model.predict(X_test)

# Evaluate the model's performance
from sklearn.metrics import mean_squared_error, r2_score

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print(f"R-squared: {r2:.2f}")

"""# **8. Data Visualization for Model Evaluation**"""

plt.scatter(y_test, y_pred)
plt.xlabel("Actual Global Radiation")
plt.ylabel("Predicted Global Radiation")
plt.title("Actual vs. Predicted Global Radiation")
plt.show()

"""# **9. Visualize Model Relationships with Individual Features**"""

# Create subplots for each input feature
plt.figure(figsize=(15, 10))
for i, feature in enumerate(input_features):
    plt.subplot(3, 3, i + 1)

    # Scatter plot of the feature vs. predicted global radiation
    plt.scatter(X_test[feature], y_test, label="Actual", alpha=0.5)
    plt.scatter(X_test[feature], y_pred, label="Predicted", alpha=0.5)
    plt.xlabel(feature)
    plt.ylabel("Global Radiation")
    plt.title(f"{feature} vs. Global Radiation")
    plt.legend()

plt.tight_layout()

"""# **10. Future Plans for Model Performance Enhancement**

1. **Advanced Modeling Techniques:**
> We will explore advanced machine learning techniques, such as ensemble methods, deep learning, and time series modeling, to capture intricate relationships within the data and enhance predictive accuracy.
2. **Feature Engineering:**
> Our team will engage in extensive feature engineering to create new variables and capture nuanced interactions between existing features, thereby refining the model's ability to explain variance in global radiation.
3. **Hyperparameter Optimization:**
> We will employ comprehensive hyperparameter tuning techniques to fine-tune the model's configuration, ensuring optimal performance on our dataset.
4. **Data Enrichment:**
> Continuously expanding our dataset with additional historical weather and solar power generation data will provide a richer source of information for training and refining the model.
5. **Cross-Validation and Regularization:**
> Robust cross-validation methods will be implemented to assess the model's generalization performance, and regularization techniques will be employed to mitigate overfitting.

# **11. Future Plans for Project Expansion**

1. **Integration with Power Generation Control:**
> In future phases of this project, we envision integrating the predicted global radiation levels into power generation control systems. This integration will enable real-time adjustments in solar energy production, optimizing power generation to align with forecasted solar radiation.

2. **Domain Expertise:**
> Consult with domain experts in meteorology or solar energy to gain insights into additional factors or considerations that may impact global radiation.
"""